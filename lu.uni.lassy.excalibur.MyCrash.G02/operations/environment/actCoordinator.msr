/*
* @author mikel
* @date Fri Mar 16 11:46:38 CET 2018
*/

package lu.uni.lassy.excalibur.MyCrash.G02.operations.environment.actCoordinator {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string

import lu.uni.lassy.excalibur.MyCrash.G02.environment
import lu.uni.lassy.excalibur.MyCrash.G02.concepts.primarytypes.classes
import lu.uni.lassy.excalibur.MyCrash.G02.concepts.primarytypes.datatypes

	Operation Model {
		
		operation: actCoordinator.outactCoordinator.oeGetAllRequests():ptBoolean {
			
			/* Pre Protocol: */
			preP {
				let TheSystem:ctState in
				let TheActor:actAdministrator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				/* PreP01 */
				TheSystem.vpStarted = true
				
				/* PreP02 */
				and TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			/* Pre Functional: */
			preF {
				true
			}
			
			/* Post Functional */
			postF {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				let ColctRequest:Bag(ctRequest) in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				TheSystem.rnctRequest->select(status.eq("")) = ColctRequest
				
				if (ColctRequest->IsEmpty() = false)
				then (
					/* PostF01 */
					TheActor.rnInterfaceIN^ieRequestListToCheck()
				)
				else (
					/* PostF02 */
					TheActor.rnInterfaceIN^ieMessage()
				)
				endif
			}
			
			/* Post Protocol:*/
			postP {
				true
			}
		}
		
		operation: actCoordinator.outactCoordinator.oeCheckAvailability(ARequestName:dtName, ARequestCity:dtCity, ARequestCategory:etCategory):ptBoolean {
			
			/* Pre Protocol: */
			preP {
				let TheSystem:ctState in
				let TheActor:actAdministrator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				/* PreP01 */
				TheSystem.vpStarted = true
				
				/* PreP02 */
				and TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			/* Pre Functional: */
			preF {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				let ColctPI:Bag(ctPI) in
				let ColctRequest:Bag(ctRequest) in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				/* PreF01 */
				TheSystem.rnctRequest->select(name.eq(APIName) category.eq(APICategory) city.eq(APICity)) = ColctRequest
				and ColctRequest->size().eq(1)
			}
			
			/* Post Functional */
			postF {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				let ThectRequest:ctRequest in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				TheSystem.rnctPI->select(name.eq(APIName) category.eq(APICategory) city.eq(APICity)) = ColctPI
				
				if (ColctPI.IsEmpty() = false)
				then (
					/* PostF01 */
					ThectRequest.rnctRequest.ignored = true
				)
				else (
					/* PostF02 */
					ThectRequest.rnctRequest.ignored = false
				)
				endif
				
				/* PostF03 */
				and TheActor.rnInterfaceIN^ieMessage()
			}
			
			/* Post Protocol:*/
			postP {
				true
			}
		}
		
		operation: actCoordinator.outactCoordinator.oeDeliverRequest(ARequestID:dtRequestID):ptBoolean {
			
			/* Pre Protocol: */
			preP {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				/* PreP01 */
				TheSystem.vpStarted = true
				
				/* PreP02 */
				and TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			/* Pre Functional: */
			preF {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				let ColctRequest:Bag(ctRequest) in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				/* PreF01 */
				TheSystem.rnctRequest->select(ignored.eq(false)) = ColctRequest
				and ColctRequest->IsEmpty() = false
			}
			
			/* Post Functional */
			postF {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				let ThectRequest:ctRequest in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				/* PostF01 */
				ThectRequest.rnctRequest.status = "pending"
				
				/* PostF02 */
				and TheActor.rnInterfaceIN^ieRequestDelivered()
			}
			
			/* Post Protocol:*/
			postP {
				true
			}
		}
		
		operation: actCoordinator.outactCoordinator.oeValidateAlert(AdtAlertID: dtAlertID):ptBoolean {
			/* Pre protocol */
			preP {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = The Actor
				
				/* Pre P01 */
				TheSystem.vpStarted = true
				
				/* Pre P02 */
				TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			/* Pre Functional */
			preF {
				let TheSystem:ctState in
				let ColctAlert:Bag(ctAlert) in
			
				self.rnActor.rnSystem = TheSystem
			
				/* Pre F01 */
				TheSystem.rnctAlert->select(id.eq(AdtAlertID)) = ColctAlert
				and ColctAlert->size.eq(1)
			}
			
			/* Post Functional */
			postF {
				let TheSystem:ctState in
				let ThectAlert:ctAlert in
			
				self.rnActor.rnSystem = TheSystem
			
				/* Post F01 */
				TheSystem.rnctAlert->select(id.eq(AdtAlerID)) = ThectAlert
				and ThectAlert.status.eq("valid")
				and TheActor.rnInterfaceIN^ieMessage("Alert validated!")
			}
			
			/* Post Protocol */
			postP {
				true
			}
		}
		
		operation: actCoordinator.outactCoordinator.oeInvalidateAlert(AdtAlertID: dtAlertID):ptBoolean {
			/* Pre protocol */
			preP {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = The Actor
				
				/* Pre P01 */
				TheSystem.vpStarted = true
				
				/* Pre P02 */
				TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			/* Pre Functional */
			preF {
				let TheSystem:ctState in
				let ColctAlert:Bag(ctAlert) in
			
				self.rnActor.rnSystem = TheSystem
			
				/* Pre F01 */
				TheSystem.rnctAlert->select(id.eq(AdtAlertID)) = ColctAlert
				and ColctAlert->size.eq(1)
			}
			
			/* Post Functional */
			postF {
				let TheSystem:ctState in
				let ThectAlert:ctAlert in
			
				self.rnActor.rnSystem = TheSystem
			
				/* Post F01 */
				TheSystem.rnctAlert->select(id.eq(AdtAlerID)) = ThectAlert
				and ThectAlert.status.eq("closed")
				and TheActor.rnInterfaceIN^ieMessage("Alert invalidated!")
			}
			
			/* Post Protocol */
			postP {
				true
			}
		}
		
		operation: actCoordinator.outactCoordinator.oeGetAlertSet(AetAlertStatus: etAlertStatus):ptBoolean {
			/* Pre protocol */
			preP {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = The Actor
				
				/* Pre P01 */
				TheSystem.vpStarted = true
				
				/* Pre P02 */
				TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			/* Pre Functional */
			preF {
				true
			}
			
			/* Post Functional */
			postF{
				let TheSystem: ctState in
				let ThectAlert:ctAlert in
				
				self.rnActor.rnSystem = TheSystem
				
				/* Post F01 */
				TheSystem.rnctAlert->select(status.eq(AetAlertStatus)) = ThectAlert
				and ThectAlert.rnctAlert->forAll(isSentToCoordinator)
				and ThectAlert.msrIsSentToCoordinator
			}
			
			/* Post Protocol */
			postP {
				true
			}
		}
		
		operation: actCoordinator.outactCoordinator.oeGetCrisisSet(AetCrisisStatus: etCrisisStatus):ptBoolean {
			/* Pre protocol */
			preP {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = The Actor
				
				/* Pre P01 */
				TheSystem.vpStarted = true
				
				/* Pre P02 */
				TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			/* Pre Functional */
			preF {
				true
			}
			
			/* Post Functional */
			postF{
				let TheSystem: ctState in
				let ThectCrisis:ctCrisis in
				
				self.rnActor.rnSystem = TheSystem
				
				/* Post F01 */
				TheSystem.rnctCrisis->select(status.eq(AetCrisisStatus)) = ThectCrisis
				and ThectCrisis.rnctCrisis->forAll(isSentToCoordinator)
				and ThectCrisis.msrIsSentToCoordinator
			}
			
			/* Post Protocol */
			postP {
				true
			}
		}
		
		operation: actCoordinator.outactCoordinator.oeSetCrisisType(AdtCrisisID: dtCrisisID, AetCrisisType: etCrisisType):ptBoolean {
			/* Pre protocol */
			preP {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = The Actor
				
				/* Pre P01 */
				TheSystem.vpStarted = true
				
				/* Pre P02 */
				TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			/* PreFunctional */
			preF {
				let TheSystem:ctState in
				let ColctCrisis:Bag(ctCrisis) in
			
				self.rnActor.rnSystem = TheSystem
			
				/* Pre F01 */
				TheSystem.rnctCrisis->select(id.eq(AdtCrisisID)) = ColctCrisis
				and ColctCrisis->size.eq(1)
			}
			
			/* Post Functional */
			postF {
				let TheSystem:ctState in
				let ThectCrisis:ctCrisis in
			
				self.rnActor.rnSystem = TheSystem
			
				/* Post F01 */
				TheSystem.rnctCrisis->select(id.eq(AdtCrisisID)) = ThectCrisis
				and ThectCrisis.AetCrisisType.eq(AdtCrisisType)
				and TheActor.rnInterfaceIN^ieMessage("Crisis type set to " + AdtCrisisType)
			}
			
			/* Post Protocol */
			postP {
				true
			}
		}
		
		operation: actCoordinator.outactCoordinator.oeSetCrisisStatus(AdtCrisisID: dtCrisisID, AetCrisisStatus: etCrisisStatus):ptBoolean {
			/* Pre protocol */
			preP {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = The Actor
				
				/* Pre P01 */
				TheSystem.vpStarted = true
				
				/* Pre P02 */
				TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			/* PreFunctional */
			preF {
				let TheSystem:ctState in
				let ColctCrisis:Bag(ctCrisis) in
			
				self.rnActor.rnSystem = TheSystem
			
				/* Pre F01 */
				TheSystem.rnctCrisis->select(id.eq(AdtCrisisID)) = ColctCrisis
				and ColctCrisis->size.eq(1)
			}
			
			/* Post Functional */
			postF {
				let TheSystem:ctState in
				let ThectCrisis:ctCrisis in
			
				self.rnActor.rnSystem = TheSystem
			
				/* Post F01 */
				TheSystem.rnctCrisis->select(id.eq(AdtCrisisID)) = ThectCrisis
				and ThectCrisis.AetCrisisStatus.eq(AdtCrisisStatus)
				and TheActor.rnInterfaceIN^ieMessage("Crisis status set to " + AdtCrisisStatus)
			}
			
			/* Post Protocol */
			postP {
				true
			}
		}
		
		operation: actCoordinator.outactCoordinator.oeSetCrisisHandler(AdtCrisisID: dtCrisisID):ptBoolean {
			/* Pre protocol */
			preP {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = The Actor
				
				/* Pre P01 */
				TheSystem.vpStarted = true
				
				/* Pre P02 */
				TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			/* PreFunctional */
			preF {
				let TheSystem:ctState in
				let ColctCrisis:Bag(ctCrisis) in
			
				self.rnActor.rnSystem = TheSystem
			
				/* Pre F01 */
				TheSystem.rnctCrisis->select(id.eq(AdtCrisisID)) = ColctCrisis
				and ColctCrisis->size.eq(1)
			}
			
			/* Post Functional */
			postF {
				let TheSystem:ctState in
				let ThectCrisis:ctCrisis in
			
				self.rnActor.rnSystem = TheSystem
				
				/* Post F01 */
				TheSystem.rnctCrisis->select(id.eq(AdtCrisisID)) = ThectCrisis
				and ThectCrisis.AetCrisisStatus.eq("handled")
				and TheActor.rnInterfaceIN^ieMessage("Handler of the crisis " + AdtCrisisID + " is being handled by coordinator with id " + self.id)
				
				/* Post F02 */
				
				/* Post F03 */
				
				/* Post F04 */
			}
			
			/* Post Protocol */
			postP {
				true
			}
		}
		
		operation: actCoordinator.outactCoordinator.oeReportOnCrisis(AdtCrisisID: dtCrisisID, AdtComment: dtComment):ptBoolean {
			/* Pre protocol */
			preP {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = The Actor
				
				/* Pre P01 */
				TheSystem.vpStarted = true
				
				/* Pre P02 */
				TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			/* PreFunctional */
			preF {
				let TheSystem:ctState in
				let ColctCrisis:Bag(ctCrisis) in
			
				self.rnActor.rnSystem = TheSystem
			
				/* Pre F01 */
				TheSystem.rnctCrisis->select(id.eq(AdtCrisisID)) = ColctCrisis
				and ColctCrisis->size.eq(1)
			}
			
			/* Post Functional */
			postF {
				let TheSystem:ctState in
				let ThectCrisis:ctCrisis in
			
				self.rnActor.rnSystem = TheSystem
			
				/* Post F01 */
				TheSystem.rnctCrisis->select(id.eq(AdtCrisisID)) = ThectCrisis
				and ThectCrisis.AdtComment.eq(AdtComment)
				and TheActor.rnInterfaceIN^ieMessage("Added comment to the crisis")
			}
			
			/* Post Protocol */
			postP {
				true
			}
		}
		
		operation: actCoordinator.outactCoordinator.oeCloseCrisis(AdtCrisisID: dtCrisisID):ptBoolean {
			/* Pre protocol */
			preP {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = The Actor
				
				/* Pre P01 */
				TheSystem.vpStarted = true
				
				/* Pre P02 */
				TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			/* Pre Functional */
			preF {
				let TheSystem:ctState in
				let ColctCrisis:Bag(ctCrisis) in
			
				self.rnActor.rnSystem = TheSystem
			
				/* Pre F01 */
				TheSystem.rnctCrisis->select(id.eq(AdtCrisisID)) = ColctCrisis
				and ColctCrisis->size.eq(1)
			}
			
			/* Post Functional */
			postF {
				let TheSystem:ctState in
				let ThectCrisis:ctCrisis in
			
				self.rnActor.rnSystem = TheSystem
			
				/* Post F01 */
				TheSystem.rnctCrisis->select(id.eq(AdtCrisisID)) = ThectCrisis
				and ThectCrisis.AetCrisisStatus.eq("closed")
				and TheActor.rnInterfaceIN^ieMessage("Crisis closed")
			}
			
			/* Post Protocol */
			postP {
				true
			}
		}
	}
}