/*
* @author mikel
* @date Fri Mar 16 11:46:38 CET 2018
*/

package lu.uni.lassy.excalibur.MyCrash.G02.operations.environment {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string

import lu.uni.lassy.excalibur.MyCrash.G02.environment
import lu.uni.lassy.excalibur.MyCrash.G02.concepts.primarytypes.classes
import lu.uni.lassy.excalibur.MyCrash.G02.concepts.primarytypes.datatypes

	Operation Model {
		
		operation: actCoordinator.outactCoordinator.oeGetAllRequests():ptBoolean {
			
			/* Pre Protocol: */
			preP {
				let TheSystem:ctState in
				let TheActor:actAdministrator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				/* PreP01 */
				TheSystem.vpStarted = true
				
				/* PreP02 */
				and TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			/* Pre Functional: */
			preF {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				let ColctRequest:Bag(ctRequest) in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				/* PreF01 */
				TheSystem.rnctRequest->select(status.eq("")) = ColctRequest
				and ColctRequest->IsEmpty() = false
			}
			
			/* Post Functional */
			postF {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				/* PostF01 */
				TheActor.rnInterfaceIN^ieRequestListToCheck()
			}
			
			/* Post Protocol:*/
			postP {
				true
			}
		}
		
		operation: actCoordinator.outactCoordinator.oeCheckAvailability(ARequestName:dtName, ARequestCity:dtCity, ARequestCategory:etCategory):ptBoolean {
			
			/* Pre Protocol: */
			preP {
				let TheSystem:ctState in
				let TheActor:actAdministrator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				/* PreP01 */
				TheSystem.vpStarted = true
				
				/* PreP02 */
				and TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			/* Pre Functional: */
			preF {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				let ColctPI:Bag(ctPI) in
				let ColctRequest:Bag(ctRequest) in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				/* PreF01 */
				TheSystem.rnctPI->select(name.eq(APIName)/*, category.eq(APICategory), city.eq(APICity)*/) = ColctPI
				and ColctPI->IsEmpty() = true
				
				/* PreF02 */
				TheSystem.rnctRequest->select(name.eq(APIName)/*, category.eq(APICategory), city.eq(APICity)*/) = ColctRequest
				and ColctRequest->IsEmpty() = true
			}
			
			/* Post Functional */
			postF {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				let ARequestIgnored:dtIgnored in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				/* PostF01 */
				ARequestIgnored = true
				or ARequestIgnored = false
				
				/* PostF02 */
				and TheActor.rnInterfaceIN^ieMessage()
			}
			
			/* Post Protocol:*/
			postP {
				true
			}
		}
		
		operation: actCoordinator.outactCoordinator.oeDeliverRequest(ARequestID:dtRequestID):ptBoolean {
			
			/* Pre Protocol: */
			preP {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				/* PreP01 */
				TheSystem.vpStarted = true
				
				/* PreP02 */
				and TheActor.rnctAuthenticated.vpIsLogged = true
			}
			
			/* Pre Functional: */
			preF {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				let ColctRequest:Bag(ctRequest) in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				/* PreF01 */
				TheSystem.rnctRequest->select(ignored.eq(false)) = ColctRequest
				and ColctRequest->IsEmpty() = false
			}
			
			/* Post Functional */
			postF {
				let TheSystem:ctState in
				let TheActor:actCoordinator in
				let ARequestStatus:etRequestStatus in
				
				self.rnActor.rnSystem = TheSystem
				and self.rnActor = TheActor
				
				/* PostF01 */
				ARequestStatus = "pending"
				
				/* PostF02 */
				and TheActor.rnInterfaceIN^ieRequestDelivered()
			}
			
			/* Post Protocol:*/
			postP {
				true
			}
		}
	}
}