/*
* @author mikel
* @date Fri Mar 16 11:46:38 CET 2018
*/

package lu.uni.lassy.excalibur.MyCrash.G02.usecases {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string

import lu.uni.lassy.excalibur.MyCrash.G02.environment

	Use Case Model {	
		use case system subfunction oeCreateSystemAndEnvironment() {
		
			actor actMsrCreator[primary, active]
			
			returned messages {
				
				ieSystemCreated returned to actMsrCreator
			}
		}
		
		use case system subfunction oeLogin(ALogin:dtLogin, APassword:dtPassword) {
		
			actor actAuthenticated[primary, active]
			
			returned messages {
				
				ieLoggedIn returned to actAuthenticated
			}
		}
		
		use case system subfunction oeLogout() {
		
			actor actAuthenticated[primary, active]
			
			returned messages {
				
				ieLoggedOut returned to actAuthenticated
			}
		}
	
		use case system subfunction oeGetAllRequestsFromCoordinator() {
		
			actor actAdministrator[primary, active]
			actor actCoordinator[secondary, passive]
			actor actPerson[secondary, multiple]
			
			returned messages {
				
				ieRequestList returned to actAdministrator
			}
		}
		
		use case system subfunction oeTreatRequest(ARequestID:dtRequestID) {
		
			actor actAdministrator[primary, active]
			actor actPerson[secondary, passive]
		}
		
		use case system subfunction oeSolveRequest(ARequestID:dtRequestID) {
		
			actor actAdministrator[primary, active]
			actor actPerson[secondary, passive]
			
			returned messages {
				
				ieRequestSolved returned to actAdministrator
			}
		}
		
		use case system subfunction oeAddPI(APIName:dtPIName, APICity:dtPICity, APIGPSLocation:dtGPSLocation, APIDescription:dtDescription, APICategory:dtPICategory) {
		
			actor actAdministrator[primary, active]
			actor actPerson[secondary, passive]
			
			returned messages {
				
				iePIAdded returned to actAdministrator
				iePIAdded returned to actPerson
			}
		}
		
		use case system subfunction oeUpdatePI(APIID:dtPIID, APIName:dtPIName, APICity:dtPICity, APIGPSLocation:dtGPSLocation, APIDescription:dtDescription, APICategory:dtPICategory) {
		
			actor actAdministrator[primary, active]
			
			returned messages {
				
				iePIUpToDate returned to actAdministrator
			}
		}
		
		use case system subfunction oeDeletePI(APIID:dtPIID) {
		
			actor actAdministrator[primary, active]
			
			returned messages {
				
				iePIDeleted returned to actAdministrator
			}
		}
		
		use case system subfunction oeGetAllRequests() {
		
			actor actCoordinator[primary, active]
			actor actPerson[secondary, multiple]
			
			returned messages {
				
				ieRequestListToCheck returned to actCoordinator
			}
		}
		
		use case system subfunction oeCheckAvailability(ARequestID:dtRequestID, ARequestName:dtRequestName, ARequestCity:dtRequestCity) {
		
			actor actCoordinator[primary, active]
			actor actPerson[secondary, passive]
			
			returned messages {
			
				ieMessage returned to actCoordinator	
			}
		}
		
		use case system subfunction oeDeliverRequest(ARequestID:dtRequestID) {
		
			actor actCoordinator[primary, active]
			actor actPerson[secondary, passive]
			actor actAdministrator[secondary, passive]
			
			returned messages {
			
				ieRequestDelivered returned to actCoordinator	
			}
		}
		
		use case system subfunction oeSearchPI(APIName:dtPIName, APICategory:dtPICategory, APICity:dtPICity) {
		
			actor actPerson[primary, active]
			actor actAdministrator[secondary, passive]
			
			returned messages {
				
				ieMessage returned to actPerson
			}
		}
		
		use case system subfunction oeSendNewRequest(APIName:dtPIName, APICategory:dtPICategory, APICity:dtPICity) {
		
			actor actPerson[primary, active]
			actor actCoordinator[secondary, passive]
			
			returned messages {
				
				ieMessage returned to actPerson
			}
		}
		
		use case system subfunction oeGetGPSLocation(APIName:dtPIName, APICategory:dtPICategory, APICity:dtPICity) {
		
			actor actPerson[primary, active]
			actor actAdministrator[secondary, passive]
			
			returned messages {
				
				ieMessage returned to actPerson
			}
		}
		
		use case system subfunction oeGetDescription(APIName:dtPIName, APICategory:dtPICategory, APICity:dtPICity) {
		
			actor actPerson[primary, active]
			actor actAdministrator[secondary, passive]
			
			returned messages {
				
				ieMessage returned to actPerson
			}
		}
		
		use case system subfunction oeSendSms(APIName:dtPIName, APIGPSLocation:dtGPSLocation, AProblemDescription:dtDescription, APhoneNumber:dtPhoneNumber) {
			
			actor actPerson[primary, active]
			actor actComCompany[secondary, passive]
			
			returned messages {
				
				ieSmsSent returned to actPerson
				ieSmsSend returned to actComCompany
			}
		}
		
		use case system subfunction oeLoginWrong(ALogin:dtLogin, APassword:dtPassword) {
			
			actor actAuthenticated[primary, active]
			
			returned messages {
				
				ieUsrPwWrong returned to actAuthenticated
			}
		}
		
		use case system subfunction oeThirdLoginWrong(ALogin:dtLogin, APassword:dtPassword) {
			
			actor actAuthenticated[primary, active]
			
			returned messages {
				
				ieLoginWrongSendCaptcha returned to actAuthenticated
			}
		}
		
		
		use case system subfunction oeLoginWitchCaptcha(ALogin:dtLogin, APassword:dtPassword, ACaptcha:dtCaptcha) {
			
			actor actAuthenticated[primary, active]
			
			returned messages {
				
				ieLoggedIn returned to actAuthenticated
			}
		}
		
		use case system usergoal ugSecurelyUseSystem() {
			
			actor actAuthenticated[primary, active]
			
			reuse oeLogin[1..1]
			reuse oeLogout[1..1]
			
			step a: actAuthenticated executes oeLogin
			step b: actAuthenticated executes oeLogout
			
			ordering constraint
				"step (a) must always precede step (b)."
		}
		
		use case system usergoal ugCheckRequest() {
			
			actor actCoordinator[primary, active]
			
			reuse ugSecurelyUseSystem[1..1]
			reuse oeGetAllRequests[1..1]
			reuse oeCheckAvailability[1..*]
			reuse oeDeliverRequest[1..*]
			
			step a: actCoordinator executes ugSecurelyUseSystem
			step b: actCoordinator executes oeGetAllRequests
			step c: actCoordinator executes oeCheckAvailability
			step d: actCoordinator executes oeDeliverRequest
			
			ordering constraint
				"step (a) must always be performed before all the other steps."
				
			ordering constraint
				"Subsequently, all the steps follow after step (a) is performed."
		}
	
		use case system usergoal ugManageRequest() {
			
			actor actAdministrator[primary, active]
			
			reuse ugSecurelyUseSystem[1..1]
			reuse oeGetAllRequestsFromCoordinator[1..1]
			reuse oeTreatRequest[1..*]
			reuse oeSolveRequest[1..*]
			
			step a: actAdministrator executes ugSecurelyUseSystem
			step b: actAdministrator executes oeGetAllRequestsFromCoordinator
			step c: actAdministrator executes oeTreatRequest
			step d: actAdministrator executes oeSolveRequest
			
			ordering constraint
				"step (a) must always be performed before all the other steps."
				
			ordering constraint
				"Subsequently, all the steps follow after step (a) is performed."
		}
		
		use case system summary suAddNewPI() {
		
			actor actPerson[primary, active]
			actor actMsrCreator[secondary, active]
			actor actCoordinator[secondary, proactive]
			actor actAdministrator[secondary, proactive]
			
			reuse oeCreateSystemAndEnvironment[1..1]
			reuse ugSecurelyUseSystem[1..1]
			reuse oeSearchPI[1..*]
			reuse oeSendNewRequest[1..*]
			
			reuse ugCheckRequest[1..*]
			reuse ugManageRequest[1..*]
			reuse oeAddPI[1..*]
			
			step a: actMsrCreator executes oeCreateSystemAndEnvironment
			step b: actPerson executes ugSecurelyUseSystem
			step c: actPerson executes oeSearchPI
			step d: actPerson executes oeSendNewRequest
			step e: actCoordinator executes ugSecurelyUseSystem
			step f: actCoordinator executes ugCheckRequest
			step g: actCoordinator executes ugSecurelyUseSystem
			step h: actAdministrator executes ugManageRequest
			step i: actAdministrator executes oeAddPI
				
			ordering constraint
				"step (a) is the first step to perform."
				
			ordering constraint
				"step (b), (d) and (f) must always be performed before (c), (e) and (g)."
				
			ordering constraint
				"Subsequently, all the steps follow after step (a) is performed."
		}
		
		use case system summary suGenerateNewAlert() {
		
			actor actPerson[primary, active, multiple]
			actor actComCompany[primary, active, multiple]
			actor actMsrCreator[secondary, active]
			
			reuse oeCreateSystemAndEnvironment[1..1]
			reuse ugSecurelyUseSystem[1..1]
			reuse oeSearchPI[1..*]
			reuse oeGetGPSLocation[1..*]
			reuse oeAlert[1..*]
			
			step a: actMsrCreator executes oeCreateSystemAndEnvironment
			step b: actPerson executes ugSecurelyUseSystem
			step c: actPerson executes oeSearchPI
			step d: actPerson executes oeGetGPSLocation
			step e: actComCompany executes oeAlert
			
			ordering constraint
				"step (a) and (b) must always be performed before all the other steps."
				
			ordering constraint
				"step (a) is the first step to perform."
				
			ordering constraint
				"Subsequently, all the steps follow after step (a) is performed."
		}
	
		use case system subfunction oeAlert(ActHumanKind:dtHumanKind, AdtDate:dtDate, AdtTime:dtTime, AdtPhoneNumber:dtPhoneNumber, AdtGPSLocation:dtGPSLocation, AdtComment:dtComment, AdtAlertType:dtAlertType) {
			actor actComCompany[primary, active]
			
			returned messages {
				ieSmsSend returned to actComCompany
			}
		}


		use case system subfunction oeAddCoordinator(AdtCoordinatorID:dtCoordinatorID, AdtLogin:dtLogin, AdtPassword:dtPassword, CoordinatorAccessRights:dtAccessRights) {
			actor actAdministrator[primary, active]
			
			returned messages {
				ieCoordinatorAdded returned to actAdministrator
			}
		}


		use case system subfunction oeDeleteCoordinator(AdtCoordinatorID:dtCoordinatorID) {
			actor actAdministrator[primary, active]
			
			returned messages {
				ieCoordinatorDeleted returned to actAdministrator
			}
		}
		

		use case system subfunction oeUpdateCoordinatorAccessRights(CoordinatorAccessRights:dtAccessRights) {
			actor actAdministrator[primary, active]
			
			returned messages {
				ieCoordinatorUpdated returned to actAdministrator
			}
		}


		use case system usergoal ugAdministrateTheSystem() {
			actor actAdministrator[primary, active]
			
			reuse ugSecurelyUseSystem[1..1]
			reuse oeAddCoordinator[1..*]
			reuse oeDeleteCoordinator[1..*]
			reuse oeUpdateCoordinatorAccessRights[1..*]
			
			step a: actAdministrator executes ugSecurelyUseSystem
			step b: actAdministrator executes oeAddCoordinator
			step c: actAdministrator executes oeDeleteCoordinator
			step d: actAdministrator executes oeUpdateCoordinatorAccessRights
			
			ordering constraint 
				"Step a must be executed before all other step"
				
			ordering constraint
				"Step b must be executed before executing steps c or d"
		}
			
		use case system subfunction oeGetCrisisSet(AetCrisisStatus:etCrisisStatus, AdtCrisisType:dtCrisisType) {
			actor actCoordinator[primary, active]
		}


		use case system subfunction oeGetAlertSet(AetAlertStatus:etAlertSatus, AdtAlertType:dtAlertType) {
			actor actCoordinator[primary, active]
		}


		use case system usergoal ugMonitor() {
			actor actCoordinator[primary, active]
			
			reuse ugSecurelyUseSystem[1..1]
			reuse oeGetCrisisSet[1..*]
			reuse oeGetAlertSet[1..*]
			
			step a: actCoordinator executes ugSecurelyUseSystem
			step b: actCoordinator executes oeGetCrisisSet
			step c: actCoordinator executes oeGetAlertSet
			
			ordering constraint 
				"Step a must be executed before all other step"
		}
		
		
		use case system subfunction oeValidateAlert(AdtAlertID:dtAlertID) {
			actor actCoordinator[primary, active]
		}
		
		
		use case system subfunction oeInvalidateAlert(AdtAlertID:dtAlertID) {
			actor actCoordinator[primary, active]
		}
		
		
		use case system subfunction oeSetCrisisStatus(AdtCrisisID:dtCrisisID, AetCrisisStatus:etCrisisStatus) {
			actor actCoordinator[primary, active]
		}
		
		
		use case system subfunction oeSetCrisisType(AdtCrisisID:dtCrisisID, AetCrisisType:etCrisisType) {
			actor actCoordinator[primary, active]
		}
		
		
		use case system subfunction oeSetCrisisHandler(AdtCrisisID:dtCrisisID) {
			actor actCoordinator[primary, active]
		}
		
		
		use case system subfunction oeReportOnCrisis(AdtCrisisID:dtCrisisID, AdtComment:dtComment) {
			actor actCoordinator[primary, active]
		}
		
		
		use case system subfunction oeCloseCrisis(AdtCrisisID:dtCrisisID) {
			actor actCoordinator[primary, active]
		}
		
		
		use case system usergoal ugManageCrisis() {
			actor actCoordinator[primary, active]
			
			reuse ugSecurelyUseSystem[1..1]
			reuse oeValidateAlert[1..*]
			reuse oeInvalidateAlert[1..*]
			reuse oeSetCrisisStatus[1..*]
			reuse oeSetCrisisType[1..*]
			reuse oeSetCrisisHandler[1..*]
			reuse oeReportOnCrisis[1..*]
			reuse oeCloseCrisis[1..*]
			
			step a: actCoordinator executes ugSecurelyUseSystem
			step b: actCoordinator executes oeValidateAlert
			step c: actCoordinator executes oeInvalidateAlert
			step d: actCoordinator executes oeSetCrisisHandler
			step e: actCoordinator executes oeSetCrisisStatus
			step f: actCoordinator executes oeSetCrisisType
			step g: actCoordinator executes oeReportOnCrisis
			step h: actCoordinator executes oeCloseCrisis
			
			ordering constraint 
				"Step a must be executed before executing all other step"
			
			ordering constraint
				"Step b must be executed before executing step d"
				
			ordering constraint
				"Step d must executed before executing steps e, f, g and h"
		}
	}
}