/*
* @author mikel
* @date Fri Mar 16 11:46:38 CET 2018
*/

package lu.uni.lassy.excalibur.MyCrash.G02.usecases {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string

import lu.uni.lassy.excalibur.MyCrash.G02.environment

	Use Case Model {
		
		use case system subfunction oeCreateSystemAndEnvironment() {
		
			actor actMsrCreator[primary, active]
		}
		
		use case system subfunction oeLogin(ALogin:dtLogin, APassword:dtPassword) {
		
			actor actAuthenticated[primary, active]
			
			returned messages {
				
				ieLoggedIn returned to actAuthenticated
			}
		}
		
		use case system subfunction oeLogout() {
		
			actor actAuthenticated[primary, active]
			
			returned messages {
				
				ieLoggedOut returned to actAuthenticated
			}
		}
	
		use case system subfunction oeGetAllRequestsFromCoordinator() {
		
			actor actAdministrator[primary, active]
			actor actCoordinator[secondary, passive]
		}
		
		use case system subfunction oeGetRequest(ARequestID:dtRequestID) {
		
			actor actAdministrator[primary, active]
			actor actCoordinator[secondary, passive]
		}
		
		use case system subfunction oeTreatRequest(ARequestID:dtRequestID) {
		
			actor actAdministrator[primary, active]
		}
		
		use case system subfunction oeSolveRequest(ARequestID:dtRequestID) {
		
			actor actAdministrator[primary, active]
			
			returned messages {
				
				ieRequestSolved returned to actAdministrator
				ieRequestSolved returned to actPerson
				//iePIRequestedAdded returned to actPerson
			}
		}
		
		use case system subfunction oeAddPI(APIName:dtPIName, APICity:dtPICity, APIGPSLocation:dtGPSLocation, APIDescription:dtPIDescription, APICategory:dtPICategory) {
		
			actor actAdministrator[primary, active]
			
			returned messages {
				
				iePIAdded returned to actAdministrator
			}
		}
		
		use case system subfunction oeUpdatePI(APIID:dtPIID, APIName:dtPIName, APICity:dtPICity, APIGPSLocation:dtGPSLocation, APIDescription:dtPIDescription, APICategory:dtPICategory) {
		
			actor actAdministrator[primary, active]
			
			returned messages {
				
				iePIUpToDate returned to actAdministrator
			}
		}
		
		use case system subfunction oeDeletePI(APIID:dtPIID) {
		
			actor actAdministrator[primary, active]
			
			returned messages {
				
				iePIDeleted returned to actAdministrator
			}
		}
		
		use case system subfunction oeGetAllRequests() {
		
			actor actCoordinator[primary, active]
			actor actPerson[secondary, passive]
		}
		
		use case system subfunction oeCheckAvailability(ARequestID:dtRequestID, ARequestName:dtRequestName, ARequestCity:dtRequestCity) {
		
			actor actCoordinator[primary, active]
			actor actPerson[secondary, passive]
			
			returned messages {
			
				ieIsPIAvailable returned to actCoordinator	
			}
		}
		
		use case system subfunction oeDeliverRequest(ARequestID:dtRequestID) {
		
			actor actCoordinator[primary, active]
			
			returned messages {
			
				ieRequestDelivered returned to actCoordinator	
			}
		}
		
		/*
		use case system subfunction oeSignIn(ALogin:dtLogin, APassword:dtPassword, ASamePassword:dtPassword) {
		
			actor actPerson[primary, active]
			
			returned messages {
			
				ieSignedIn returned to actPerson	
			}
		}
		*/
		
		use case system subfunction oeSearchPI(APIName:dtPIName, APICategory:dtPICategory, APICity:dtPICity) {
		
			actor actPerson[primary, active]
		}
		
		use case system subfunction oeSendNewRequest(APIName:dtPIName, APICategory:dtPICategory, APICity:dtPICity) {
		
			actor actPerson[primary, active]
		}
		
		use case system subfunction oeGetGPSLocation(APIName:dtPIName, APICategory:dtPICategory, APICity:dtPICity) {
		
			actor actPerson[primary, active]
		}
		
		use case system subfunction oeGetDescription(APIName:dtPIName, APICategory:dtPICategory, APICity:dtPICity) {
		
			actor actPerson[primary, active]
		}
		
		use case system subfunction oeGetDistance(APersonType:etPersonType, APIGPSLocation:dtGPSLocation, ACurrentLocation:dtGPSLocation) {
		
			actor actPerson[primary, active]
		}
		
		use case system subfunction oeGetRoute(APersonType:etPersonType, APIGPSLocation:dtGPSLocation, ACurrentLocation:dtGPSLocation) {
		
			actor actPerson[primary, active]
		}
	}
}