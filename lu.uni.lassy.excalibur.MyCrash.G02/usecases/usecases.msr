/*
* @author mikel
* @date Fri Mar 16 11:46:38 CET 2018
*/

package lu.uni.lassy.excalibur.MyCrash.G02.usecases {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string

import lu.uni.lassy.excalibur.MyCrash.G02.environment

	Use Case Model {	
		use case system subfunction oeCreateSystemAndEnvironment() {
		
			actor actMsrCreator[primary, active]
			
			returned messages {
				
				ieSystemCreated returned to actMsrCreator
			}
		}
		
		use case system subfunction oeLogin(ALogin:dtLogin, APassword:dtPassword) {
		
			actor actAuthenticated[primary, active]
			
			returned messages {
				
				ieLoggedIn returned to actAuthenticated
			}
		}
		
		use case system subfunction oeLogout() {
		
			actor actAuthenticated[primary, active]
			
			returned messages {
				
				ieLoggedOut returned to actAuthenticated
			}
		}
	
		use case system subfunction oeGetAllRequestsFromCoordinator() {
		
			actor actAdministrator[primary, active]
			actor actCoordinator[secondary, passive]
			actor actPerson[secondary, multiple]
			
			returned messages {
				
				ieRequestList returned to actAdministrator
			}
		}
		
		use case system subfunction oeTreatRequest(ARequestID:dtRequestID) {
		
			actor actAdministrator[primary, active]
			actor actPerson[secondary, passive]
		}
		
		use case system subfunction oeSolveRequest(ARequestID:dtRequestID) {
		
			actor actAdministrator[primary, active]
			actor actPerson[secondary, passive]
			
			returned messages {
				
				ieRequestSolved returned to actAdministrator
			}
		}
		
		use case system subfunction oeAddPI(APIName:dtPIName, APICity:dtPICity, APIGPSLocation:dtGPSLocation, APIDescription:dtDescription, APICategory:dtPICategory) {
		
			actor actAdministrator[primary, active]
			actor actPerson[secondary, passive]
			
			returned messages {
				
				iePIAdded returned to actAdministrator
				iePIAdded returned to actPerson
			}
		}
		
		use case system subfunction oeUpdatePI(APIID:dtPIID, APIName:dtPIName, APICity:dtPICity, APIGPSLocation:dtGPSLocation, APIDescription:dtDescription, APICategory:dtPICategory) {
		
			actor actAdministrator[primary, active]
			
			returned messages {
				
				iePIUpToDate returned to actAdministrator
			}
		}
		
		use case system subfunction oeDeletePI(APIID:dtPIID) {
		
			actor actAdministrator[primary, active]
			
			returned messages {
				
				iePIDeleted returned to actAdministrator
			}
		}
		
		use case system subfunction oeGetAllRequests() {
		
			actor actCoordinator[primary, active]
			actor actPerson[secondary, multiple]
			
			returned messages {
				
				ieRequestListToCheck returned to actCoordinator
			}
		}
		
		use case system subfunction oeCheckAvailability(ARequestID:dtRequestID, ARequestName:dtRequestName, ARequestCity:dtRequestCity) {
		
			actor actCoordinator[primary, active]
			actor actPerson[secondary, passive]
			
			returned messages {
			
				ieMessage returned to actCoordinator	
			}
		}
		
		use case system subfunction oeDeliverRequest(ARequestID:dtRequestID) {
		
			actor actCoordinator[primary, active]
			actor actPerson[secondary, passive]
			actor actAdministrator[secondary, passive]
			
			returned messages {
			
				ieRequestDelivered returned to actCoordinator	
			}
		}
		
		use case system subfunction oeSearchPI(APIName:dtPIName, APICategory:dtPICategory, APICity:dtPICity) {
		
			actor actPerson[primary, active]
			actor actAdministrator[secondary, passive]
			
			returned messages {
				
				ieMessage returned to actPerson
			}
		}
		
		use case system subfunction oeSendNewRequest(APIName:dtPIName, APICategory:dtPICategory, APICity:dtPICity) {
		
			actor actPerson[primary, active]
			actor actCoordinator[secondary, passive]
			
			returned messages {
				
				ieMessage returned to actPerson
			}
		}
		
		use case system subfunction oeGetGPSLocation(APIName:dtPIName, APICategory:dtPICategory, APICity:dtPICity) {
		
			actor actPerson[primary, active]
			actor actAdministrator[secondary, passive]
			
			returned messages {
				
				ieMessage returned to actPerson
			}
		}
		
		use case system subfunction oeGetDescription(APIName:dtPIName, APICategory:dtPICategory, APICity:dtPICity) {
		
			actor actPerson[primary, active]
			actor actAdministrator[secondary, passive]
			
			returned messages {
				
				ieMessage returned to actPerson
			}
		}
		
		use case system subfunction oeSendSms(APIName:dtPIName, APIGPSLocation:dtGPSLocation, AProblemDescription:dtDescription, APhoneNumber:dtPhoneNumber) {
			
			actor actPerson[primary, active]
			actor actComCompany[secondary, passive]
			
			returned messages {
				
				ieSmsSent returned to actPerson
				ieSmsSend returned to actComCompany
			}
		}
		
		use case system subfunction oeLoginWrong(ALogin:dtLogin, APassword:dtPassword) {
			
			actor actAuthenticated[primary, active]
			
			returned messages {
				
				ieUsrPwWrong returned to actAuthenticated
			}
		}
		
		use case system subfunction oeThirdLoginWrong(ALogin:dtLogin, APassword:dtPassword) {
			
			actor actAuthenticated[primary, active]
			
			returned messages {
				
				ieLoginWrongSendCaptcha returned to actAuthenticated
			}
		}
		
		
		use case system subfunction oeLoginWitchCaptcha(ALogin:dtLogin, APassword:dtPassword, ACaptcha:dtCaptcha) {
			
			actor actAuthenticated[primary, active]
			
			returned messages {
				
				ieLoggedIn returned to actAuthenticated
			}
		}
	use case system subfunction oeAddCoordinator(CoordinatorId:dtCoordinatorId, CoordinatorName:dtCoordinatorName, CoordinatorLogin:dtLogin, CoordinatorPassword:dtPassword, CoordinatorAccessRights:dtAccessRights) {
			actor actAdministrator[primary, active]
			
			returned messages {
				ieCoordinatorAdded returned to actAdministrator
			}
		}
	use case system subfunction oeHandelCrisis(CrisisId:dtCrisisId) {
			actor actCoordinator[primary, active]
			
			returned messages {
				ieMessage returned to actCoordinator
			}
		}
	use case system subfunction oeAlert(AlertWitness:dtPerson, AlertDate:dtDate, AlertTime:dtTime, PhoneNumber:dtPhoneNumber, AlertLocation:dtGPSLocation, AlertDescription:dtAlertDescription) {
			actor actComCompany[primary, active]
			
			returned messages {
				ieSmsSend returned to actComCompany
			}
		}
	use case system subfunction oeRequestCrisisList() {
			actor actCoordinator[primary, active]
			returned messages {
				ieRequestedCrisisList returned to actCoordinator
			}
		}
	use case system subfunction oeCreateCrisis(CrisisId:dtCrisisId, CrisisDescription:dtCrisisDescription, CrisisAccessRights:dtAccessRights) {
			actor actAdministrator[primary, active]
			returned messages {
				ieCrisisCreated returned to actAdministrator
			}
		}
		
		use case system usergoal ugSecurelyUseSystem() {
			
			actor actAuthenticated[primary, active]
			
			reuse oeLogin[1..1]
			reuse oeLogout[1..1]
			
			step a: actAuthenticated executes oeLogin
			step b: actAuthenticated executes oeLogout
			
			ordering constraint
				"step (a) must always precede step (b)."
		}
		
		use case system usergoal ugCheckRequest() {
			
			actor actCoordinator[primary, active]
			
			reuse ugSecurelyUseSystem[1..1]
			reuse oeGetAllRequests[1..1]
			reuse oeCheckAvailability[1..*]
			reuse oeDeliverRequest[1..*]
			
			step a: actCoordinator executes ugSecurelyUseSystem
			step b: actCoordinator executes oeGetAllRequests
			step c: actCoordinator executes oeCheckAvailability
			step d: actCoordinator executes oeDeliverRequest
			
			ordering constraint
				"step (a) must always be performed before all the other steps."
				
			ordering constraint
				"Subsequently, all the steps follow after step (a) is performed."
		}
	
		use case system usergoal ugManageRequest() {
			
			actor actAdministrator[primary, active]
			
			reuse ugSecurelyUseSystem[1..1]
			reuse oeGetAllRequestsFromCoordinator[1..1]
			reuse oeTreatRequest[1..*]
			reuse oeSolveRequest[1..*]
			
			step a: actAdministrator executes ugSecurelyUseSystem
			step b: actAdministrator executes oeGetAllRequestsFromCoordinator
			step c: actAdministrator executes oeTreatRequest
			step d: actAdministrator executes oeSolveRequest
			
			ordering constraint
				"step (a) must always be performed before all the other steps."
				
			ordering constraint
				"Subsequently, all the steps follow after step (a) is performed."
		}
		
		use case system usergoal ugSendAlert() {
			
			actor actPerson[primary, active]
			
			reuse ugSecurelyUseSystem[1..1]
			reuse oeSearchPI[1..*]
			reuse oeGetGPSLocation[1..*]
			reuse oeSendSms[1..*]
			
			step a: actPerson executes ugSecurelyUseSystem
			step b: actPerson executes oeSearchPI
			step c: actPerson executes oeGetGPSLocation
			step d: actPerson executes oeSendSms
			
			ordering constraint
				"step (a) must always be performed before all the other steps."
				
			ordering constraint
				"Subsequently, all the steps follow after step (a) is performed."
		}
		
		use case system summary suAddNewPI() {
		
			actor actPerson[primary, active]
			actor actMsrCreator[secondary, active]
			actor actCoordinator[secondary, proactive]
			actor actAdministrator[secondary, proactive]
			
			reuse oeCreateSystemAndEnvironment[1..1]
			reuse ugSecurelyUseSystem[1..1]
			reuse oeSearchPI[1..*]
			
			reuse ugCheckRequest[1..*]
			reuse ugManageRequest[1..*]
			reuse oeAddPI[1..*]
			
			step a: actMsrCreator executes oeCreateSystemAndEnvironment
			step b: actPerson executes ugSecurelyUseSystem
			step c: actPerson executes oeSearchPI
			step d: actCoordinator executes ugSecurelyUseSystem
			step e: actCoordinator executes ugCheckRequest
			step f: actCoordinator executes ugSecurelyUseSystem
			step g: actAdministrator executes ugManageRequest
			step h: actAdministrator executes oeAddPI
				
			ordering constraint
				"step (a) is the first step to perform."
				
			ordering constraint
				"step (b), (d) and (f) must always be performed before (c), (e) and (g)."
				
			ordering constraint
				"Subsequently, all the steps follow after step (a) is performed."
		}
		
		use case system summary suGenerateNewAlert() {
		
			actor actPerson[primary, active, multiple]
			actor actMsrCreator[secondary, active]
			
			reuse oeCreateSystemAndEnvironment[1..1]
			reuse ugSecurelyUseSystem[1..1]
			reuse oeSearchPI[1..*]
			reuse oeGetGPSLocation[1..*]
			reuse oeSendSms[1..*]
			
			step a: actMsrCreator executes oeCreateSystemAndEnvironment
			step b: actPerson executes ugSecurelyUseSystem
			step c: actPerson executes oeSearchPI
			step d: actPerson executes oeGetGPSLocation
			step e: actPerson executes oeSendSms
			
			ordering constraint
				"step (a) and (b) must always be performed before all the other steps."
				
			ordering constraint
				"step (a) is the first step to perform."
				
			ordering constraint
				"Subsequently, all the steps follow after step (a) is performed."
		}
	}
}